ext {
    //Version
    supportVersion = '25.3.1'
    retrofitVersion = '2.2.0'
    rxVersion = '2.0.1'
    daggerVersion = '2.0.1'
    glideVersion = '3.7.0'
    javaxAnnotationVersion = '1.0'
    okhttp3Version = '3.4.1'
    butterknifeVersion  = '8.5.1'
    multiDexVersion = '1.0.0'
    circleImageVersion = '2.1.0'

    junitVersion = '4.12'
    mockitoVersion = '2.7.6'
    robolectricVersion = '3.2.2'

    //Packages
    supportPackage = 'com.android.support'
    supportConstraintPackage = 'com.android.support.constraint'
    retrofitPackage = 'com.squareup.retrofit2'
    reactivePackage = 'io.reactivex.rxjava2'
    okhttp3Package = 'com.squareup.okhttp3'
    annotationPackage = 'org.androidannotations'
    javaxPackage = 'javax.annotation'
    daggerPackage = 'com.google.dagger'
    glidePackage = 'com.github.bumptech.glide'
    hdodenhofPackage = 'de.hdodenhof'
    junitPackage = 'junit'
    mockitoPackage = 'org.mockito'
    robolectricPackage = 'org.robolectric'
    butterknifePackage = 'com.jakewharton'

    supportDependencies = [design: buildDependency(supportPackage, 'design', supportVersion),
                           recyclerView: buildDependency(supportPackage, 'recyclerview-v7', supportVersion),
                           cardView : buildDependency(supportPackage, 'cardview-v7', supportVersion),
                           appCompat : buildDependency(supportPackage, 'appcompat-v7', supportVersion),
                           supportAnnotation: buildDependency(supportPackage, 'support-annotations', supportVersion),
                           palette: buildDependency(supportPackage, 'palette-v7', supportVersion),
                           percent : buildDependency(supportPackage, 'percent', supportVersion),
                           multidex : buildDependency(supportPackage, 'multidex', multiDexVersion),
                           constraint : buildDependency(supportConstraintPackage, 'constraint-layout', '1.0.2')]

    retrofitDependencies = [retrofit: buildDependency(retrofitPackage, 'retrofit', retrofitVersion),
                            gson: buildDependency(retrofitPackage, 'converter-gson', retrofitVersion),
                            converterGson : buildDependency(retrofitPackage, 'converter-gson', retrofitVersion),
                            rxAdapterJava: buildDependency(retrofitPackage, 'adapter-rxjava', retrofitVersion)]

    rxDependencies = [rxAndroid: buildDependency(reactivePackage, 'rxandroid',rxVersion),
                      rxJava : buildDependency(reactivePackage, 'rxjava', rxVersion) ]

    butterKnifeDependencies = [butterKnife : buildDependency(butterknifePackage,'butterknife', butterknifeVersion),
                               butterKnifeCompiler  :  buildDependency(butterknifePackage,'butterknife-compiler', butterknifeVersion)]

    daggerDependencies = [daggerAPT : buildDependency(daggerPackage,'dagger-compiler', daggerVersion),
                          dagger :buildDependency(daggerPackage,'dagger', daggerVersion) ]

    okhttp3 = [loggingInterceptor : buildDependency(okhttp3Package, 'logging-interceptor', okhttp3Version)]

    javaxAnnotation = buildDependency(javaxPackage, 'jsr250-api', javaxAnnotationVersion)

    glide = buildDependency(glidePackage, 'glide', glideVersion)

    circleImageView = buildDependency(hdodenhofPackage, 'circleimageview', circleImageVersion)

    testingDependencies = [junit      : buildDependency(junitPackage, 'junit', junitVersion),
                           mockito    : buildDependency(mockitoPackage, 'mockito-core', mockitoVersion),
                           robolectric: buildDependency(robolectricPackage, 'robolectric', robolectricVersion),]
}

String buildDependency(String pack, String dependency, String version) {
    return "${pack}:${dependency}:${version}"
}